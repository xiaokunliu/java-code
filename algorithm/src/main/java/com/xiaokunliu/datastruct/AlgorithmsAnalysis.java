package com.xiaokunliu.datastruct;

/**
 * Created by keithl on 2017/10/21.
 */

public class AlgorithmsAnalysis {

    /**
     *  数据结构:数据的逻辑结构 + 数据的存储结构 + 数据运算（算法的实现问题）
     *  核心:其一是将抽象研究数据集合的结构,其二是将抽象数据结构转换为存储组织形式
     *  逻辑结构:
     *  1,集合,无序混乱数据元素
     *  2,线性结构,存在着一个对一个的关系,也就是数据元素之间通常有严格的先后次序
     *  3,树形结构,数据元素之间存在着一个对多个的关系
     *  4,图状结构,数据元素存在着多个对多个的关系
     *  线性结构:线性表、栈、队列和串
     *  非线性结构:树和图
     *
     *  存储结构:
     *  1,顺序存储结构:该方法把逻辑上相邻的结点存储在物理位置上相邻的存储单元中
     *  2,链接存储结构:不要求逻辑上相邻的借点在物理位置上也相邻,结点之间的逻辑关系由附加的指针字段表示
     *  3,索引存储结构:在存储结点信息的同时,还要建立附加的索引表,索引表由若干个索引项组成
     *      稠密索引:每个结点在索引表中都有一个索引项,其中索引项的地址指示节点所在的存储位置
     *      稀疏索引:若一组结点在索引表中只对应一个索引项,索引项的地址指示一组结点的起始存储位置
     *      索引项的形式:关键字(能唯一标识一个结点的那些数据项),地址
     *  4,散列存储结构:根据结点的关键字直接计算出该结点的存储地址
     */


    // 算法分析
    public static int sum(int n) {
        int sum;       // 声明
        sum = 0;       // 赋值,这时候占用一个时间单元

        // 注意for 循环的执行顺序是先赋值,然后进行判断比较,接着就是执行语句,
        // 进行i++,再进行判断,再执行语句
        // ...
        // i++,再进行判断,n+1
        for (int index = 0;index <=n; index++){
            sum += index * index * index;       // 两次乘法 + 一次加法  + 一次赋值  =  4个时间单元,并且计算N次,共有4N
        }

        return sum; // 也占用一个时间单元
    }


    public static void main(String[] args) {

    }
}
