<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--
        设置全局
    -->
    <!--<settings>-->
        <!--<setting name="" value=""/>-->
    <!--</settings>-->

    <!--
        设置别名
    -->
   <typeAliases>
       <!--
            为包设置别名
       -->
       <!--<package name="com.xiaokunliunliu.springmvc_mybatis.dao"/>-->
   </typeAliases>

    <!--
		添加自定义的mybatis对象工厂
		MyBatis 每次创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成。 默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过参数构造方法来实例化。
		如果想覆盖对象工厂的默认行为，则可以通过创建自己的对象工厂来实现
		ExampleObjectFactory为自定义的对象工厂
	-->
    <!--<objectFactory type="com.xiaokunliunliu.study.springmvc_mybatis.tools.ExampleObjectFactory">-->
    <!--<property name="someProperty" value="100"/>-->
    <!--</objectFactory>-->

    <!--
        MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：
            Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)
            ParameterHandler (getParameterObject, setParameters)
            ResultSetHandler (handleResultSets, handleOutputParameters)
            StatementHandler (prepare, parameterize, batch, update, query)
            这些类中方法的细节可以通过查看每个方法的签名来发现，或者直接查看 MyBatis 发行包中的源代码。 如果你想做的不仅仅是监控方法的调用，那么你最好相当了解要重写的方法的行为。 因为如果在试图修改或重写已有方法的行为的时候，你很可能在破坏 MyBatis 的核心模块。 这些都是更低层的类和方法，所以使用插件的时候要特别当心。

            通过 MyBatis 提供的强大机制，使用插件是非常简单的，只需实现 Interceptor 接口，并指定想要拦截的方法签名即可
    -->
    <!--<plugins>-->
    <!--<plugin interceptor="com.xiaokunliunliu.study.springmvc_mybatis.tools.ExamplePlugin">-->
    <!--<property name="someProperty" value="100"/>-->
    <!--</plugin>-->
    <!--</plugins>-->

</configuration>