<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-4.0.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
                           http://www.springframework.org/schema/jdbc
                           http://www.springframework.org/schema/jdbc/spring-jdbc.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd">


    <!--AOP 基于Xml配置, 自动扫描 -->
    <context:component-scan base-package="com.xiaokunliu.study.springinaction.aop.xml"/>

    <!-- 声明面向切面，与注解@EnableAspectJAutoProxy对应 -->
    <aop:aspectj-autoproxy />

     <!--
        声明需要的bean
     -->
    <bean id="aopPerformance" class="com.xiaokunliu.study.springinaction.aop.xml.AopPerformanceImpl"/>

    <!--声明切面为一个bean-->
    <bean id="audience" class="com.xiaokunliu.study.springinaction.aop.xml.AopAudience"/>


    <!--
        定义spring配置的切面
    -->
    <aop:config>
        <!-- 切面 -->
        <aop:aspect ref="audience">
            <!--  切点 -->
            <aop:pointcut id="performance" expression="execution(* com.xiaokunliu.study.springinaction.aop.xml.AopPerformance.perform(..))"/>
            <!-- 通知方法 -->
            <aop:before method="silenceCellPhones" pointcut-ref="performance"/>
            <aop:after method="takeSeats" pointcut-ref="performance"/>
            <aop:after-returning method="applause" pointcut-ref="performance"/>
            <aop:after-throwing method="demandRefund" pointcut-ref="performance"/>

            <!-- 声明环绕通知 -->
            <aop:around method="watchPerformance" pointcut-ref="performance"/>
        </aop:aspect>
    </aop:config>

    <!--
        AOP 传递通知参数
    -->
    <!-- 定义切面bean -->
    <bean id="aopBlankDisc" class="com.xiaokunliu.study.springinaction.aop.xml.AopBlankDisc"/>

    <bean id="tracker" class="com.xiaokunliu.study.springinaction.aop.xml.AopTrackCounter"/>

    <!--
           注意参数名称要方法名称对应上去
    -->
    <aop:config>
        <aop:aspect ref="tracker">
            <aop:pointcut id="tracker_performance"
                          expression="execution(* com.xiaokunliu.study.springinaction.aop.xml.AopCompactDisc.play(java.lang.String)) and args(trackedNumber)"/>
            <aop:before method="countTracked" pointcut-ref="tracker_performance" arg-names="trackedNumber"/>
        </aop:aspect>
    </aop:config>

    <!--
        AOP 引入新的功能
    -->
    <aop:config>
        <aop:aspect>
            <aop:declare-parents types-matching="com.xiaokunliu.study.springinaction.aop.xml.AopPerformance+"
                                 implement-interface="com.xiaokunliu.study.springinaction.aop.xml.AopMonitor"
                                 default-impl="com.xiaokunliu.study.springinaction.aop.xml.AopDefaultMonitor"/>
        </aop:aspect>
    </aop:config>

    <!-- ============================================================================================================== -->
    <!--
        引入AspectJ，注入AspectJ声明的切面对象bean
    -->
    <!--
        或者在注解签名加上
        使用@Configuration的类上加入@EnableSpringConfigured注解
    -->
    <!--<context:spring-configured />-->

    <!--
        对于AspectJ的知识 先暂停
        https://docs.spring.io/spring/docs/2.5.x/reference/aop.html
        参考Aspectj 实战
    -->

    <!--<bean id="criticismEngine" class="com.xiaokunliu.study.springinaction.aop.aspectj.CriticismEngineImpl"/>-->
    <!--&lt;!&ndash;-->
        <!--Spring无法创建切面AopAspect，AopAspect是AspectJ在运行时期生成的，通过其提供的静态方法aspectOf（）创建切面单例，-->
        <!--等到Spring为切面注入属性criticismEngine的时候，其实已经切面已经是实例化，这时候通过属性注入criticismEngine-->
    <!--&ndash;&gt;-->
    <!--<bean id="aopAspect" class="com.xiaokunliu.study.springinaction.aop.aspectj.AopAspect" factory-method="aspectOf">-->
        <!--<property name="criticismEngine" ref="criticismEngine"/>-->
    <!--</bean>-->

    <!--<bean id="performance" class="com.xiaokunliu.study.springinaction.aop.aspectj.AopPerformanceImpl"-->
          <!--depends-on="com.xiaokunliu.study.springinaction.aop.aspectj.AopAspect"/>-->

    <!--<aop:aspectj-autoproxy>-->
        <!--<aop:include name="performance"/>-->
    <!--</aop:aspectj-autoproxy>-->
</beans>
