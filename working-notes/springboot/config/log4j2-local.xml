<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="DEBUG" monitorInterval="30">
    <!--
        系统选择配置文件的优先级(从先到后)如下：

　　　　　　(1).classpath下的名为log4j2-test.json 或者log4j2-test.jsn的文件.

　　　　　　(2).classpath下的名为log4j2-test.xml的文件.

　　　　　　(3).classpath下名为log4j2.json 或者log4j2.jsn的文件.

　　　　　　(4).classpath下名为log4j2.xml的文件.
    -->
    <Properties>
        <Property name="LOG_PATTERN">%highlight{[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} (%F:%L) - %msg%n}{FATAL=red, ERROR=red, WARN=yellow, INFO=black, DEBUG=green, TRACE=blue}</Property>
        <Property name="APP_LOG_ROOT">/Users/keithl/Documents/yiyiyaya/github/tpp_admin</Property>
    </Properties>

    <Appenders>
        <!--  设置日志输出到控制台并输出debug级别以上的日志 -->
        <Console name="Console" target="SYSTEM_OUT" follow="true">
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY" />
            <PatternLayout pattern="${LOG_PATTERN}" />
        </Console>

        <!--
            记录整个项目info的日志
        -->
        <RollingFile name="appLog"
                     fileName="${APP_LOG_ROOT}/logs/app.log"
                     filePattern="${APP_LOG_ROOT}/logs/$${date:yyyy-MM-dd}/app-%d{yyyy-MM-dd}-%i.log.gz"
                     append="true">
            <PatternLayout pattern="${LOG_PATTERN}" />
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <Policies>
                <!-- 基于时间的触发策略。该策略主要是完成周期性的log文件封存工作。有两个参数：
				interval，integer型，指定两次封存动作之间的时间间隔。单位:以日志的命名精度来确定单位，
					比如yyyy-MM-dd-HH 单位为小时，yyyy-MM-dd-HH-mm 单位为分钟
				modulate，boolean型，说明是否对封存时间进行调制。若modulate=true，
					则封存时间将以0点为边界进行偏移计算。比如，modulate=true，interval=4hours，
					那么假设上次封存日志的时间为03:00，则下次封存日志的时间为04:00，
					之后的封存时间依次为08:00，12:00，16:00
			 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <SizeBasedTriggeringPolicy size="100MB" />
            </Policies>

            <DefaultRolloverStrategy max="20" />
        </RollingFile>

        <!--
            记录整个项目error的日志
        -->
        <RollingFile name="appErrorLog"
                     fileName="${APP_LOG_ROOT}/logs/app-error.log"
                     filePattern="${APP_LOG_ROOT}/logs/$${date:yyyy-MM-dd}/app-error-%d{yyyy-MM-dd}-%i.log.gz"
                     append="true">
            <PatternLayout pattern="${LOG_PATTERN}" />
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <Policies>
                <!-- 基于时间的触发策略。该策略主要是完成周期性的log文件封存工作。有两个参数：
				interval，integer型，指定两次封存动作之间的时间间隔。单位:以日志的命名精度来确定单位，
					比如yyyy-MM-dd-HH 单位为小时，yyyy-MM-dd-HH-mm 单位为分钟
				modulate，boolean型，说明是否对封存时间进行调制。若modulate=true，
					则封存时间将以0点为边界进行偏移计算。比如，modulate=true，interval=4hours，
					那么假设上次封存日志的时间为03:00，则下次封存日志的时间为04:00，
					之后的封存时间依次为08:00，12:00，16:00
			 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <SizeBasedTriggeringPolicy size="100MB" />
            </Policies>

            <DefaultRolloverStrategy max="20" />
        </RollingFile>
    </Appenders>


    <Loggers>
        <!--
        日志级别：
            All < Trace < Debug < Info < Warn < Error < Fatal < OFF
        -->
        <Root level="debug">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="appLog"/>
            <AppenderRef ref="appErrorLog"/>
        </Root>
    </Loggers>
</Configuration>